'use client';
import { useState, useEffect } from "react";
import { Card, Button, Container, Row, Col, Badge, Alert } from "react-bootstrap";
import { useRouter } from "next/navigation";
import OptionsManager from "./addProductComponents/OptionManager";
import SkuManager from "./addProductComponents/skuManager";
import axios from "axios";
import { toast } from "react-toastify";
import API_CONFIG from "@/config/api";

export default function ProductVariantsPage({ productId }) {
  const router = useRouter();
  const [product, setProduct] = useState(null);
  const [options, setOptions] = useState([]);
  const [skuList, setSkuList] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [images, setImages] = useState([]); // ƒê·ªÉ t∆∞∆°ng th√≠ch v·ªõi SkuManager

  useEffect(() => {
    fetchProductDetails();
  }, [productId]);

  const fetchProductDetails = async () => {
    try {
      const response = await axios.get(API_CONFIG.getApiUrl(`/variants/admin/${productId}`));
      // API tr·∫£ v·ªÅ d·ªØ li·ªáu trong response.data.product
      const productData = response.data.product || response.data;
      console.log('Product Data:', productData); // Debug log
      setProduct(productData);

      if (response.data.attributes) {
        const transformedOptions = response.data.attributes.map(attr => ({
          id: attr.id_attribute,
          name: attr.name,
          type: attr.type,
          values: attr.values.map(val => ({
            id: val.id_value,
            label: attr.type === 2 ? (val.value_note || val.value) : val.value, // Color c√≥ note, text th√¨ d√πng value
            value: val.value,
            value_note: val.value_note,
            status: val.status,
            images: []
          }))
        }));
        console.log('üîç Transformed options:', transformedOptions);
        setOptions(transformedOptions);
      }

      if (response.data.skus && response.data.skus.length > 0) {
        const transformedSkus = response.data.skus.map(sku => ({
          combo: sku.option_combo.map(combo => ({
            label: combo.type === 2 ?
              (response.data.attributes
                .find(attr => attr.name === combo.attribute)?.values
                .find(val => val.value === combo.value)?.value_note || combo.value)
              : combo.value,
            value: combo.value,
            optionName: combo.attribute,
            id_value: combo.id_value,
            type: combo.type
          })),
          price_sale: sku.price_sale || 0,
          quantity: sku.quantity || 0,
          status: sku.status === 1 ? 2 : 1,
          main_image_index: null,
          images: (sku.images || []).map(img => ({
            url: img.Img_url,
            isMain: img.is_main || false,
            id_product_img: img.id_product_img,
          })),
          variant_id: sku.variant_id,
          sku: sku.sku || ''
        }));
        console.log('üîç Transformed SKUs:', transformedSkus);
        setSkuList(transformedSkus);
      }
    } catch (error) {
      console.error('Error fetching product:', error);
      toast.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin s·∫£n ph·∫©m');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSaveVariants = async () => {
    setIsSaving(true);
    try {
      const formData = new FormData();

      // G·ª≠i attributes v·ªõi ƒë√∫ng format
      formData.append('attributes', JSON.stringify(options));

      const transformedVariants = skuList.map(sku => ({
        combination: sku.combo.map(c => ({
          attributeName: c.optionName,
          value: c.value // Gi·ªØ nguy√™n value g·ªëc (hex code cho m√†u, text cho size)
        })),
        price_sale: sku.price_sale || 0,
        quantity: sku.quantity || 0,
        status: sku.status === 2 ? 1 : 0, // Convert Frontend: 2=Hi·ªÉn th·ªã‚Üí1=active, 1=·∫®n‚Üí0=inactive
        sku: sku.sku || '',
        images: sku.images || [],
        variant_id: sku.variant_id || null
      }));

      formData.append('variants', JSON.stringify(transformedVariants));

      // X·ª≠ l√Ω ·∫£nh theo option n·∫øu c√≥
      options.forEach(option => {
        option.values.forEach(value => {
          (value.images || []).forEach(img => {
            if (img.file) {
              formData.append('optionImages', img.file);
              formData.append('optionImageIsMain', img.isMain === 1 ? 'true' : 'false');
              formData.append('optionImageValues', value.label);
            }
          });
        });
      });

      // X·ª≠ l√Ω ·∫£nh SKU
      const variantImageData = [];
      skuList.forEach((sku, skuIndex) => {
        (sku.images || []).forEach(img => {
          if (img.file) {
            formData.append('variantImages', img.file);
            variantImageData.push({
              variantIndex: skuIndex,
              isMain: img.isMain || false
            });
          }
        });
      });

      if (variantImageData.length > 0) {
        formData.append('variantImageData', JSON.stringify(variantImageData));
      }

      console.log('üîç Sending variants data:', transformedVariants); // Debug log
      console.log('üîç Sending attributes:', options); // Debug log
      console.log('üîç Sending variant images:', variantImageData); // Debug log

      await axios.put(API_CONFIG.getApiUrl(`/variants/${productId}/variants`), formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });

      toast.success('C·∫≠p nh·∫≠t bi·∫øn th·ªÉ th√†nh c√¥ng!');
      fetchProductDetails();

    } catch (error) {
      console.error('Error saving variants:', error);
      console.error('Error details:', error.response?.data);
      toast.error(`L·ªói c·∫≠p nh·∫≠t bi·∫øn th·ªÉ: ${error.response?.data?.message || error.message}`);
    } finally {
      setIsSaving(false);
    }
  };

  const handleComplete = () => {
    toast.success('Ho√†n t·∫•t t·∫°o s·∫£n ph·∫©m!');
    router.push('/admin/products');
  };

  const handleBack = () => {
    router.back();
  };

  if (isLoading) {
    return (
      <Container fluid className="py-4">
        <div className="text-center">
          <div className="spinner-border" role="status">
            <span className="visually-hidden">ƒêang t·∫£i...</span>
          </div>
        </div>
      </Container>
    );
  }

  if (!product) {
    return (
      <Container fluid className="py-4">
        <Alert variant="danger">
          <i className="bi bi-exclamation-triangle me-2"></i>
          Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m
        </Alert>
      </Container>
    );
  }

  const breadcrumbItems = [
    { label: "Qu·∫£n l√Ω s·∫£n ph·∫©m", href: "/admin/products" },
    { label: product?.products_name || "S·∫£n ph·∫©m", href: `/admin/products?id=${productId}` },
    { label: "Qu·∫£n l√Ω bi·∫øn th·ªÉ" }
  ];

  return (
    <Container fluid className="py-4">
      <Row>
        <Col>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <div>
              <h2>Qu·∫£n l√Ω bi·∫øn th·ªÉ s·∫£n ph·∫©m</h2>
              <div className="d-flex align-items-center mt-2">
                <Badge bg="primary" className="me-2">ID: {product.id_products}</Badge>
                <span className="text-muted">{product.products_name}</span>
              </div>
            </div>
            <div>
              <Button variant="outline-secondary" onClick={handleBack} className="me-2">
                <i className="bi bi-arrow-left"></i> Quay l·∫°i
              </Button>
            </div>
          </div>

          {/* Qu·∫£n l√Ω thu·ªôc t√≠nh */}
          <Card className="mb-4">
            <Card.Header>
              <h5 className="mb-0">
                <i className="bi bi-tags me-2"></i>
                Qu·∫£n l√Ω thu·ªôc t√≠nh s·∫£n ph·∫©m
              </h5>
            </Card.Header>
            <Card.Body>
              <OptionsManager options={options} setOptions={setOptions} />
            </Card.Body>
          </Card>

          {/* Qu·∫£n l√Ω SKU/Bi·∫øn th·ªÉ */}
          {options.length >= 1 && options.some(opt => opt.values && opt.values.length > 0) && (
            <Card className="mb-4">
              <Card.Header>
                <h5 className="mb-0">
                  <i className="bi bi-grid-3x3-gap me-2"></i>
                  Qu·∫£n l√Ω SKU/Bi·∫øn th·ªÉ
                </h5>
              </Card.Header>
              <Card.Body>
                <SkuManager
                  options={options}
                  skuList={skuList}
                  setSkuList={setSkuList}
                  images={images}
                />
              </Card.Body>
            </Card>
          )}

          {/* Action buttons */}
          <div className="d-flex justify-content-between">
            <Button variant="outline-secondary" onClick={handleBack}>
              <i className="bi bi-arrow-left me-2"></i>
              Quay l·∫°i
            </Button>

            <div className="d-flex gap-3">
              {options.length > 0 && (
                <Button
                  variant="success"
                  onClick={handleSaveVariants}
                  disabled={isSaving}
                >
                  {isSaving ? (
                    <>
                      <span className="spinner-border spinner-border-sm me-2" role="status"></span>
                      ƒêang l∆∞u...
                    </>
                  ) : (
                    <>
                      <i className="bi bi-check2 me-2"></i>
                      L∆∞u bi·∫øn th·ªÉ
                    </>
                  )}
                </Button>
              )}

              <Button
                variant="primary"
                onClick={handleComplete}
              >
                <i className="bi bi-check-circle me-2"></i>
                Ho√†n t·∫•t
              </Button>
            </div>
          </div>

          {/* H∆∞·ªõng d·∫´n */}
          {options.length === 0 && (
            <Alert variant="info" className="mt-4">
              <i className="bi bi-lightbulb me-2"></i>
              <strong>H∆∞·ªõng d·∫´n:</strong> Th√™m √≠t nh·∫•t 1 thu·ªôc t√≠nh (nh∆∞ M√†u s·∫Øc, Dung l∆∞·ª£ng) ƒë·ªÉ t·∫°o c√°c bi·∫øn th·ªÉ s·∫£n ph·∫©m.
              N·∫øu s·∫£n ph·∫©m kh√¥ng c√≥ bi·∫øn th·ªÉ, b·∫°n c√≥ th·ªÉ b·ªè qua b∆∞·ªõc n√†y v√† nh·∫•n "Ho√†n t·∫•t".
            </Alert>
          )}
        </Col>
      </Row>
    </Container>
  );
}
